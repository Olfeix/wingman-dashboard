import React, { Component } from 'react';
import PropTypes from 'prop-types';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var ROOT_VIEWPORT_TYPE = 'viewport';
var ROOT_CONTAINER_TYPE = 'container';

var InfiniteList = function (_Component) {
  inherits(InfiniteList, _Component);

  function InfiniteList() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, InfiniteList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = InfiniteList.__proto__ || Object.getPrototypeOf(InfiniteList)).call.apply(_ref, [this].concat(args))), _this), _this.onIntersection = function (entries) {
      var _this$props = _this.props,
          isLoading = _this$props.isLoading,
          isEndReached = _this$props.isEndReached,
          onReachThreshold = _this$props.onReachThreshold;


      if (isLoading || isEndReached) {
        return;
      }

      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          onReachThreshold(entry);
        }
      });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(InfiniteList, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          root = _props.root,
          threshold = _props.threshold;


      this.io = new IntersectionObserver(this.onIntersection, {
        root: root === ROOT_CONTAINER_TYPE ? this.root : null,
        rootMargin: '0px 0px ' + threshold + 'px 0px'
      });

      this.io.observe(this.sentinel);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.io.disconnect();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          children = _props2.children,
          containerClassName = _props2.containerClassName,
          sentinelClassName = _props2.sentinelClassName,
          containerTagName = _props2.containerTagName,
          sentinelTagName = _props2.sentinelTagName;

      var ContainerTagName = containerTagName;
      var SentinelTagName = sentinelTagName;

      return React.createElement(
        ContainerTagName,
        {
          ref: function ref(element) {
            _this2.root = element;
          },
          className: containerClassName
        },
        children,
        React.createElement(SentinelTagName, {
          ref: function ref(element) {
            _this2.sentinel = element;
          },
          className: sentinelClassName
        })
      );
    }
  }]);
  return InfiniteList;
}(Component);

InfiniteList.propTypes = {
  root: PropTypes.oneOf([ROOT_VIEWPORT_TYPE, ROOT_CONTAINER_TYPE]).isRequired,
  isLoading: PropTypes.bool.isRequired,
  isEndReached: PropTypes.bool.isRequired,
  onReachThreshold: PropTypes.func.isRequired,
  children: PropTypes.node.isRequired,
  containerClassName: PropTypes.string,
  sentinelClassName: PropTypes.string,
  containerTagName: PropTypes.string,
  sentinelTagName: PropTypes.string,
  threshold: PropTypes.number
};

InfiniteList.defaultProps = {
  containerClassName: '-risl-container',
  sentinelClassName: '-risl-sentinel',
  containerTagName: 'div',
  sentinelTagName: 'div',
  threshold: 0
};

export default InfiniteList;
